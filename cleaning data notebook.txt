

DEPI Final Project

    import pandas as pd
    import matplotlib.pyplot as plt
    import seaborn as sns

Data Handling Class

    class DataHandling:
        def __init__ (self,filepath,encoding='UTF-8'):
            self.df=pd.read_csv(filepath, delimiter=';',encoding=encoding)
        
        
        def Dataexplore(self):
            print(f"data summary is:\n\n {self.df.info()}\n")
            print(f"data statistics are :\n\n{self.df.describe()} \n")
            print(f"null values are:\n\n{self.df.isna().sum()}\n")

        def Fixdtype(self):
            self.df["Order Date"]=pd.to_datetime(self.df["Order Date"],dayfirst=True)
            self.df["Ship Date"]=pd.to_datetime(self.df["Ship Date"],dayfirst=True)
        
        
        
        def Handlenulls(self):
            th=0.7*len(self.df)
            self.df.dropna(thresh=th,axis=1,inplace=True)
            for col in self.df.columns: 
                null_perc=((self.df[col].isna().sum())/len(self.df))*100 
                if 0<null_perc<=3:
                    self.df.dropna(subset=[col],inplace=True,axis=0) 
                elif 3<null_perc<70:
                    if self.df[col].dtype in['float64', 'int64']:
                        self.df[col].fillna(self.df[col].median(),inplace=True) 
                    else:
                        self.df[col].fillna(self.df[col].mode()[0],inplace=True)
        
        
        def Handle_dup(self):
            self.df.drop_duplicates(inplace=True)
         
         
        
        def Handleoutliers(self):
            for col in self.df.columns:
                if self.df[col].dtype in['float64','int64']: 
                    q1=self.df[col].quantile(0.25)
                    q3=self.df[col].quantile(0.75) 
                    IQR=q3-q1
                    lower=q1-1.5*IQR 
                    upper=q3+1.5*IQR 
                    self.df=self.df[(self.df[col]>=lower)&(self.df[col]<=upper)]

        
        def Histograms(self,column,figsize=(10,6)):
                if column not in self.df.columns:
                    raise ValueError(f"Column '{column}' is not present in the DataFrame.")
            
                if self.df[column].dtype in['float64','int64']:
                    plt.figure(figsize=figsize)
                    sns.histplot(self.df[column])
                    plt.show()

                else:
                    raise TypeError(f"Column '{column}' is not numerical.")

        
        def Cat_visual(self,column,plot_type='bar',figsize=(10,6)):
                plt.figure(figsize=figsize)
                if column not in self.df.columns:
                    raise ValueError(f"Column '{column}' is not present in the DataFrame.")
                if plot_type=='bar':
                    sns.barplot(x=self.df[column].value_counts().index, 
                            y=self.df[column].value_counts().values)
                    plt.xlabel(column)
                    plt.ylabel('Count')
                elif plot_type=='pie':
                    plt.pie(self.df[column].value_counts().values, labels=self.df[column].value_counts().index, autopct='%1.1f%%',startangle=90)
                    plt.axis('equal')
                    plt.title(column)
                    plt.show()

                else:
                    raise ValueError(f"Plot type '{plot_type}' is not supported. Use 'pie' or 'bar'.")

        
        def boxplot(self,column,figsize=(10,6)):
                plt.figure(figsize=figsize)
                if column not in self.df.columns:
                    raise ValueError(f"Column '{column}' is not present in the DataFrame.")
                sns.boxplot(x=self.df[column])

        def Cleaned(self):
            df.Handlenulls()
            df.Handle_dup()
            df.Handleoutliers()
            return self.df

    df=DataHandling("D:\Depi\EU-Dataset\Orders.csv")

    df.Fixdtype()

    orders=df.Cleaned()

Orders Table

    orders

          Row ID        Order ID Order Date  Ship Date       Ship Mode  \
    0          1  CA-2022-152156 2022-11-08 2022-11-11    Second Class   
    1          2  CA-2022-152156 2022-11-08 2022-11-11    Second Class   
    2          3  CA-2022-138688 2022-06-12 2022-06-16    Second Class   
    3          4  US-2021-108966 2021-10-11 2021-10-18  Standard Class   
    4          5  US-2021-108966 2021-10-11 2021-10-18  Standard Class   
    ...      ...             ...        ...        ...             ...   
    9989    9990  CA-2020-110422 2020-01-21 2020-01-23    Second Class   
    9990    9991  CA-2023-121258 2023-02-26 2023-03-03  Standard Class   
    9991    9992  CA-2023-121258 2023-02-26 2023-03-03  Standard Class   
    9992    9993  CA-2023-121258 2023-02-26 2023-03-03  Standard Class   
    9993    9994  CA-2023-119914 2023-05-04 2023-05-09    Second Class   

         Customer ID    Segment  Postal Code       Product ID     Sales  Quantity  \
    0       CG-12520   Consumer        42420  FUR-BO-10001798    261,96         2   
    1       CG-12520   Consumer        42420  FUR-CH-10000454    731,94         3   
    2       DV-13045  Corporate        90036  OFF-LA-10000240     14,62         2   
    3       SO-20335   Consumer        33311  FUR-TA-10000577  957,5775         5   
    4       SO-20335   Consumer        33311  OFF-ST-10000760    22,368         2   
    ...          ...        ...          ...              ...       ...       ...   
    9989    TB-21400   Consumer        33180  FUR-FU-10001889    25,248         3   
    9990    DB-13060   Consumer        92627  FUR-FU-10000747     91,96         2   
    9991    DB-13060   Consumer        92627  TEC-PH-10003645   258,576         2   
    9992    DB-13060   Consumer        92627  OFF-PA-10004041      29,6         4   
    9993    CC-12220   Consumer        92683  OFF-AP-10002684    243,16         2   

         Discount    Profit  
    0           0   41,9136  
    1           0   219,582  
    2           0    6,8714  
    3        0,45  -383,031  
    4         0,2    2,5164  
    ...       ...       ...  
    9989      0,2    4,1028  
    9990        0   15,6332  
    9991      0,2   19,3932  
    9992        0     13,32  
    9993        0    72,948  

    [9824 rows x 13 columns]

    orders.info()

    <class 'pandas.core.frame.DataFrame'>
    Index: 9824 entries, 0 to 9993
    Data columns (total 13 columns):
     #   Column       Non-Null Count  Dtype         
    ---  ------       --------------  -----         
     0   Row ID       9824 non-null   int64         
     1   Order ID     9824 non-null   object        
     2   Order Date   9824 non-null   datetime64[ns]
     3   Ship Date    9824 non-null   datetime64[ns]
     4   Ship Mode    9824 non-null   object        
     5   Customer ID  9824 non-null   object        
     6   Segment      9824 non-null   object        
     7   Postal Code  9824 non-null   int64         
     8   Product ID   9824 non-null   object        
     9   Sales        9824 non-null   object        
     10  Quantity     9824 non-null   int64         
     11  Discount     9824 non-null   object        
     12  Profit       9824 non-null   object        
    dtypes: datetime64[ns](2), int64(3), object(8)
    memory usage: 1.0+ MB

    orders.to_csv(r"D:\Depi\Cleaned\orders.csv",index=False)

    df=DataHandling("D:\Depi\EU-Dataset\Products.csv",encoding='ISO-8859-1')

    products=df.Cleaned()

Products Table

    products

               Product ID    Category Sub-Category  \
    0     FUR-BO-10000112   Furniture    Bookcases   
    1     FUR-BO-10000330   Furniture    Bookcases   
    2     FUR-BO-10000362   Furniture    Bookcases   
    3     FUR-BO-10000468   Furniture    Bookcases   
    4     FUR-BO-10000711   Furniture    Bookcases   
    ...               ...         ...          ...   
    1889  TEC-PH-10004912  Technology       Phones   
    1890  TEC-PH-10004922  Technology       Phones   
    1891  TEC-PH-10004924  Technology       Phones   
    1892  TEC-PH-10004959  Technology       Phones   
    1893  TEC-PH-10004977  Technology       Phones   

                                               Product Name  
    0      Bush Birmingham Collection Bookcase, Dark Cherry  
    1     Sauder Camden County Barrister Bookcase, Plank...  
    2                    Sauder Inglewood Library Bookcases  
    3               O'Sullivan 2-Shelf Heavy-Duty Bookcases  
    4                             Hon Metal Bookcases, Gray  
    ...                                                 ...  
    1889                  Cisco SPA112 2 Port Phone Adapter  
    1890             RCA Visys Integrated PBX 8-Line Router  
    1891  SKILCRAFT Telephone Shoulder Rest, 2" x 6.5" x...  
    1892             Classic Ivory AntiqueTelephoneZL1810  
    1893                                        GE 30524EE4  

    [1894 rows x 4 columns]

    products.to_csv(r"D:\Depi\Cleaned\products.csv",index=False)

    df=DataHandling("D:\Depi\EU-Dataset\Location.csv")

    locations=df.Cleaned()

Locations Table

    locations

         Postal Code             City       State   Region Country/Region
    0        76106.0       Fort Worth       Texas  Central  United States
    1        53711.0          Madison   Wisconsin  Central  United States
    2        68025.0          Fremont    Nebraska  Central  United States
    3        77095.0          Houston       Texas  Central  United States
    4        75080.0       Richardson       Texas  Central  United States
    ..           ...              ...         ...      ...            ...
    627      83301.0       Twin Falls       Idaho     West  United States
    628      92672.0     San Clemente  California     West  United States
    629      94568.0           Dublin  California     West  United States
    630      93405.0  San Luis Obispo  California     West  United States
    631      95240.0             Lodi  California     West  United States

    [631 rows x 5 columns]

    locations.to_csv(r"D:\Depi\Cleaned\locations.csv",index=False)

    df=DataHandling("D:\Depi\EU-Dataset\Customers.csv",encoding='ISO-8859-1')

    customers=df.Cleaned()

Customers Table

    customers

        Customer ID       Customer Name
    0      AA-10315          Alex Avila
    1      AA-10375        Allen Armold
    2      AA-10480        Andrew Allen
    3      AA-10645       Anna Andreadi
    4      AB-10015       Aaron Bergman
    ..          ...                 ...
    788    XP-21865        Xylona Preis
    789    YC-21895      Yoseph Carroll
    790    YS-21880       Yana Sorensen
    791    ZC-21910    Zuschuss Carroll
    792    ZD-21925  Zuschuss Donatelli

    [793 rows x 2 columns]

    customers.to_csv(r"D:\Depi\Cleaned\customers.csv",index=False)
